# This file generated by Quarto; do not edit by hand.
# shiny_mode: core

from __future__ import annotations

from pathlib import Path
from shiny import App, Inputs, Outputs, Session, ui

import seaborn as sns
from ipyleaflet import Map, Marker, MarkerCluster
from shiny import reactive
from shiny import App
from shiny.express import render, ui
from shinywidgets import render_widget, output_widget
import pandas as pd

bigfoot = pd.read_csv("bigfoot.csv", sep=",")
bigfoot['date'] = pd.to_datetime(bigfoot['date'], format='%Y-%m-%d')

# ========================================================================




def server(input: Inputs, output: Outputs, session: Session) -> None:
    ui.input_select(
        "state",
        label="Select a state",
        choices=sorted(bigfoot["state"].dropna().unique()),
        selected="WA", 
    )

    min_date = bigfoot["date"].min().date()
    max_date = bigfoot["date"].max().date()
    ui.input_date_range(
        "date_range",
        label="Select a date range",
        start=min_date,
        end=max_date,
        format="yyyy-mm-dd",
    )

    @reactive.calc
    def filtered_bigfoot():
        start_date, end_date = input.date_range()
        selected_state = input.state()
        df = bigfoot.copy()
        df = df[(df["date"] >= pd.to_datetime(start_date)) & (df["date"] <= pd.to_datetime(end_date))]
        df = df[df["state"] == selected_state]
        return df

    # ========================================================================

    my_palette = ["#4B5320", "#8B4513", "#A0522D", "#D2B48C", "#556B2F", "#6B8E23", "#2E8B57"] 
    sns.set_palette(my_palette)
    @render.plot
    def graph1():
        import matplotlib.pyplot as plt
        import seaborn as sns

        fig, ax = plt.subplots(figsize=(8, 5))
        sns.countplot(
            data=filtered_bigfoot(),
            x="season",
            hue="classification",
            ax=ax
        )
        ax.set_title("Sightings per Season")
        ax.set_xlabel("Season")
        ax.set_ylabel("Number of Sightings")
        return fig

    # ========================================================================

    @render.plot
    def climate_distributions():
        import matplotlib.pyplot as plt
        import seaborn as sns

        df = filtered_bigfoot()

        fig, ax = plt.subplots(2, 3, figsize=(8, 5))
        sns.histplot(data=df, x='humidity', ax=ax[0, 0], color='#4B5320')
        sns.histplot(data=df, x='wind_speed', ax=ax[0, 1], color='#4B5320')
        sns.histplot(data=df, x='pressure', ax=ax[0, 2], color='#4B5320')
        sns.histplot(data=df, x='moon_phase', ax=ax[1, 0], color='#4B5320')
        sns.histplot(data=df, x='visibility', ax=ax[1, 1], color='#4B5320')
        sns.histplot(data=df, x='temperature_mid', ax=ax[1, 2], color='#4B5320')

        fig.suptitle("Distribution of Climatic Conditions During Sightings", fontsize=14)
        plt.tight_layout()
        return fig

    # ========================================================================

    @render.data_frame
    def dataview():
        return render.DataGrid(filtered_bigfoot())

    # ========================================================================



    return None


_static_assets = ["BigFootSightings_files","BigFootSightings_files\\libs\\quarto-html\\tippy.css","BigFootSightings_files\\libs\\quarto-html\\quarto-syntax-highlighting-dark-a5cd134f9b40a21b85be3e62cd27a8fe.css","BigFootSightings_files\\libs\\quarto-html\\quarto-syntax-highlighting-7b4406b7675125bc2ba204020e191172.css","BigFootSightings_files\\libs\\bootstrap\\bootstrap-icons.css","BigFootSightings_files\\libs\\bootstrap\\bootstrap-dark-56c40a0e30d8aacdbd783e8699cc8c35.min.css","BigFootSightings_files\\libs\\bootstrap\\bootstrap-56c40a0e30d8aacdbd783e8699cc8c35.min.css","BigFootSightings_files\\libs\\quarto-dashboard\\datatables.min.css","BigFootSightings_files\\libs\\clipboard\\clipboard.min.js","BigFootSightings_files\\libs\\quarto-html\\quarto.js","BigFootSightings_files\\libs\\quarto-html\\tabsets\\tabsets.js","BigFootSightings_files\\libs\\quarto-html\\popper.min.js","BigFootSightings_files\\libs\\quarto-html\\tippy.umd.min.js","BigFootSightings_files\\libs\\quarto-html\\anchor.min.js","BigFootSightings_files\\libs\\bootstrap\\bootstrap.min.js","BigFootSightings_files\\libs\\quarto-dashboard\\quarto-dashboard.js","BigFootSightings_files\\libs\\quarto-dashboard\\stickythead.js","BigFootSightings_files\\libs\\quarto-dashboard\\datatables.min.js","BigFootSightings_files\\libs\\quarto-dashboard\\pdfmake.min.js","BigFootSightings_files\\libs\\quarto-dashboard\\vfs_fonts.js","BigFootSightings_files\\libs\\quarto-dashboard\\web-components.js","BigFootSightings_files\\libs\\quarto-dashboard\\components.js"]
_static_assets = {"/" + sa: Path(__file__).parent / sa for sa in _static_assets}

app = App(
    Path(__file__).parent / "BigFootSightings.html",
    server,
    static_assets=_static_assets,
)
